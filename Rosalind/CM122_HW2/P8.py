def find_nth(str_, chr_, n):
    ind = str_.find(chr_)
    while ind >= 0 and n > 1:
        ind = str_.find(chr_, ind+1)
        n -= 1
    return ind


def find_first_in_range(str_, chr_, top):
    ind = str_.find(chr_)
    while top > ind >= 0:
        ind = str_.find(chr_, ind+1)
    return ind


def find_last_in_range(str_, chr_, bottom):
    ind = str_.find(chr_)
    prev_ind = ind
    while bottom >= ind >= 0:
        prev_ind = ind
        ind = str_.find(chr_, ind+1)
    return prev_ind


def occurrence(str_, n):
    chr_ = str_[n]
    cnt = 0
    ind = -1
    while ind != n:
        ind = str_.find(chr_, ind+1)
        cnt += 1
    return cnt


def last_to_first(first_col, last_col, idx):
    return find_nth(first_col, last_col[idx], occurrence(last_col, idx))


def BWMatching(first_col, last_col, pattern, last_to_first):
    top = 0
    bottom = len(first_col)-1
    while top <= bottom:
        if len(pattern) > 0:
            symbol = pattern[len(pattern)-1]
            pattern = pattern[0:len(pattern)-1]
            if last_col[top:bottom+1].find(symbol) != -1:
                topIdx = find_first_in_range(last_col, symbol, top)
                bottomIdx = find_last_in_range(last_col, symbol, bottom)
                top = last_to_first[topIdx]
                bottom = last_to_first[bottomIdx]
            else:
                return 0
        else:
            return bottom - top + 1


if __name__ == '__main__':
    last = 'TCGGAACAGTATGAAATATCGATAGCTGTCTCTTAGCGTGTCCGGAAACACGGGTGTCGGACGTTGACGACTAGGGCTGCCGCAGAGTTGGTCCAGGCTACGTGTCTCCTTCTTGTTAACATTTTACAGGTGATCCGGACGGGGAATCGGTTGGCCACAGGTGTGGTCTGGCGGTAGGCCGGATAGCGTACTAGCCGCCCTCAGGCCCGTCTCAAAGGCGCTTGAGCGAGCTCCGACTTTCCTTCACGACATAGATTCGACCGGATCTCTGTGCGACCGCTTGAGATCAGATGGTCCCACGATCTGAGAGATCGTAAATAGTATGTCGCGCACCGAACATACCTCGCTTTCTGAAGTAGCGAGAAGGTCACCTCTGTTCATGCTGAAGAAGTTCGCGAGCCTACAGCTGTCCTCTTAGCATTGCTTAAAATTCGGCAGATGAATATCGCTAGTGGAGCCCCATTTGCTTCATAAGTATCAATCGATGGAGGCGGTATACAATACGCTAAGCCTCTAGGCTCGACACGGACTTCCGCCCGGGCCTATTGGCGATCGTGTCGATGAGCCAAAGCAACCAACGCTCGAATCGACGGTAGCGAACAACTACTCGGCGCCGTGAGTCGGTCGTACAATGTAAACTACAAGTGACGCTCTCTCGAGAAAACTCGCGACCCTGGACCCCTAAATGCGGCGTTACTTAGATGTGGCAGAATGTATTGTTTCTGGCGCGGGTGCTCGAGGGCTTGTCTTCGCGCCATGCCTGTACATGCGAGCACGTAGTGTTATATCATGGCCCATGCCGGAAAAAACGAGAATAATACAGCACGCATCGTCGGTATGAGCTCGAGTCGGTTAAGAGGTGTCACTCGCTCTAGAACATACGTTTTGGTAATTGATGCGTTCTAGGAGACCATCGAGGTGTATACGCGCTAACAGTCCAGAGGCCGTTTCACCTACGAACCCCTGCCATATTGCCCACGGTAACTTTGACTCTAATTCTCCACGCAGACCAAAGTCTCCTTGCGGACGAAATAG$TTTGTTAATTTGCGCGCCAATTGATTCGGGGTCCCGATCCCAGTACCATCATTCTACCCTAATTTATTTAGATAGTCGGACTTAAAAATGCTTCGTCCCGGCACCCGTCGTGATTATCTGGTTGGACTGTGATGTGCTACTTGTGTTGTGGGACTATTACGTCATGACCCCGGTCTAGGATGTGCTGGACCGAGGTGATTTGATTATCCCCCTACACGGCCTAAGTGTAACGCGCCATCCGTGAGCGTGTGTAACAACTGTGACGCATTGCGGTCGTGTGTTGGGTGTTGCCTTGACGTTTTACAGAATTAAGCATTCGTCGGAACTCCTTCAGAGGCCTAAGCGTAAATGGGAATTGAATGCTTGCCGGACGTAAGAGGTTTCTAATCTTCAGTACAGTGCGTGGTACCGCACACCCCCTGTTCCAGTAGCACGGAGCTGTCGTTATACCAACTGCTCTCCCGAGGTACAAGGGCCACCAGGCAGGGAGCGCCGTGCATTACTAATATCCCTCGCTCTTTTTCCTGAGCGATAAGGTTTTTCATCATGGCGATACGGGCGACCAAAGATCTCGGATTGCTGGTTCCGAGGCTCCCACCCCGCACTATAATCATGTAAGTAACTATGTACATGAGATTAGAGCGTTCGGACAACACTAGCTCAATTACTTGCTATTTGTCCAAAATCGGGATGCACCCGCTACAGTCGAGTTTCCAGCGTGTGTCTGTATGCTAGCCGGGGTACGTGGTACCTGCTTAGTTAGACCTATCGCGACTCCGCCCGGCGCGATGAGAATAACCGGCCTGTGTTGTATAACTGACACGATGCTATTAGTAAGTATGCTGGCCCCGACTCTCAGAGACACGACATCCGCGGCCAGTTCACGCAAAGTCGAAGGGTGGCTAGCTCTTCGCATAACACCGAATTTCGATATAGAGCGGGACATGGAGTGCATGTGGTGCGCCCATTTGCTATTAGCTTCTAGCCAGGCACCCAAGCCTTTAAGAGCCCCGAAAGTGCGACGAGCATCTAAAAGCCTAGGGGCATTTGAACTTTGGTCGCCATGCCAAAGTCCTGCACGTGCAGCGGCTACCCCGACCACTAATTCACAGACTAGTTTACACAGGTAGGTGATTTCAGACTTAGTTGAATCACTACCGAAGCAAAACGTATCCCGTCGGCGAGTACGAAGCCTTTGCACTACGTCGAGTAGATCGGAGTGTAAGTAGAATTCCACATGACCTTGGTATGGTTGTGTTGGTTGGGTCGGCGGAGAAAATTTGACATCAACACAAGGGGTCACACCGGGCCGACTATGTGGATCGCTGTTCGACCGCACCAACGACAGTCGGGATTTATATGTTGGATACTACGGCAATGAAACAGGACGGGTTACACGAAATGTTTGCTCCACACGACACTGAGCTTACACCGTAACTGCAAAGACTGTGATGAATGATCGGACCTCCGGTAGAAAACCATTTCGATTAAAGCCAACATGAGTGAGTCAGTGCCGGGACTTCGTCTTACCTCTCTAGGTGTCCTTAAGGAGGAACGACCGCAAAATGCGACAGCCGGAAGACGGCAGATATCACCTAGCCGGTACTACGGTTTGTGGTGACTCAGCTGTGTAGCCGATTCTTGCATACTTTTGGGGCGACCTCCCCTTGTTGGCGTATCAACAATATAGTTGTCGGGAACACGGCCGTCTCGCACCCGGGCGCCACGTATCATGCTCCTTTCAGTGATGGTGTTTGTGAGTCCCTTGGCTTAATACCCGTAAGCAACCCAACACCGTTCTTTGTTTATGGTCACTGACCGAAGGCCGATAGCATTGGCCAGGCCACCAGCGGCATACTATCGACTGCGCCCGAACACTGTCAGCGATCAGTTTATTAAGTTAGATGTGGCGATTCGCTTGGGGACCAGGGACTCCCTCGAGAGGCCCGGGTGGGATGGGGGGTTCCAGTAGTTCGCGGTGCTCTAACGCATCGATATCACTTGTTTAGGACTGGTGTCTCAGTCCGCCGTCGTAGCCGGCGGCACTGGACCGACCGCCAACTCGGTTTTAAGCCACGGTAATAGGTTGTTGCATCTACGACGGGCGTTACAAGTATAAAATGCCTTACATAGCTGATCCTGTAAACCTTTCTGGTCCATGCTAGCCCCAGCCTGAACGCAACGGCCTCTTTCACCAGGGCTATTTTCTGGCCGAAGGCAACACTGTTTGTCACCGGGTTTGGCTTCAATAGTTTGCTCAGTATATGACGCAGCTGCTTTTATCACGATACATCACATAATTAGACCGAGTTTACGACGTCTTACATTGATATGACTCCACTCGTCAGCCCCCTATACCGAATCCGACGGGTCCGAGCTGAGGTAAAGAATGCATTAGGGCCATGCAGGCTTAGATGACCTTATAATGACCAAAGGTTCTAGTTCAGTGTAATTGCAAAGAGTTAAACTTCCTTGCACAGTAGCAAGTGAGCGTAACCCGATTCGATTGCAATATCAAGATCATGTTCACCTTGACGTACGCAGTACAACTCATCACAGTCGTCAGCGATGGGACAAGATATTTAATACTCGTAAATAATCAATCTACCACACCCCGTCAAAGGTCTGGGATCTGCCATTTGGACAAACCACTGGTGATTCCTACAACCTATGGACCAAACGCCCTACCCAAGAGAAGACTACACGGCAACTGCACGTGACGTATTGTAAGGCGCCAAATAGGATCTCGGGCACGTCGGGTGTGAAGCTGGTTATCCCTTTCCCCTCATATTCCCATCTGTGATTAAACCGCTAGGCTAACAGGGTGCGGTCGACCATTCGCTCATGCCGTGTGTTGGGCCAATTTTTAGCTCTGCCCGCAGGTGACTGAAAGCATGGACAGCAAGTGTCTTTACTACCCTTGTTTCCTTGTGTGAACACTGAGATCAAGAAGATGACTGGGAGCCCTAATAGGGGTACAGACAATGAAGAGCTTCGAGGCCCCCATCCCACAAGGATAGAAAGCCCGTTCGTGCACCGTGCTGAAAGATTAGGCCGTCACTTTATTTACCATATACTCTCTCCTTCAGAACCCGCTACCAGTCCTATCGGGGTCCAAAGAATTAGGGCTTTGAACAATAGTTGCACCATTTGGGAAAAGCGGTCATGATCGTTTGTAAGTCGACCAAGCCGGCAAAACTTGCACGCCCAGGTGCTGTTCACAATCCGACGATTCTAAGTTCTTAGTAATAGTAGCTGTGCGGTTTGTCGATCCCTGAATCAATAGTAGGCGGTACTATACGAGGGGAGTCCTGGCCAGATGCTTCTCGCCCGCGGGCATATTTATAAATCTTTTTAAACGTTCCGATTTGTGGTGTATATATTCCGCGTCAGTGTATGTCGTCCGGCGACAAGGCTACGGAATAAAACCGGGGGACTGCTGATCGGAGTCTTTAGCTTGAACCACCTGGTGCTAGCGGATGGAACAATTCAGGCTGTCCATGTTACACTTCCCACGAAGATATAGGGAGAGCAGTGCGCGTTAGAAGACATCGCTGCACGCCGTGACTGGGGGGGTGGCGTTACTGCATTGCATTTATCACCTATAGCGTATGGCTCGGAGGAAATGGAGACAATCCCGTTTTATCAGTATCGCGTCCCATTTGCCACATGTGCGGGGTGCGAGGTTATTTAAGGGCGTTCTTGGATCATTCCAAAGAAGGATAATCTGTGGGCATTCCCTAGTTCCCGGATTACTTACAATACGTCAAAGTTCACTGAGATGACCAGCCAGTTCTTACATGTGGTGGCTAGGCCGGAGTGCGCGAAGTCCGGTCGCATGGCCCTTCACCCTGCAATCATCTTTTGGTGACCGTGAGATGTAGATATGTGCTCATGTCCTGACGCCTTGCGGCATCGGTTAATACGATGTTCTCCTGTACGAGATCGGGGCAGCTTCCGAAAAAGTAGGCAAGGCGCTCAGATAACTCGCTTCAAAGGTAGACCTATGGTAGTGGTCACACCACCAAGAGGTCACCGAGGCGCACTCAGATAGTTTGAGGTAGAGGTTTTGGAAGTAATGCCCTTCCCGGAGGTATTACGGCGAACAAGATCCCCACGACAGAGCGTAGGGGGTAGAAAGACTCGGGGTCCGCACGCTGTACGCAATACCCAGTATGGAGATTAACGGACTATGTGGTCCCCGTGGTAAATTATTTGAAGGGCCGCAGGGGTTCCCAGATTGTGCGATATTTGCCTCTAGCTACATTCACCGCGTAAATACCGCTGCATGTAACCGTAGAATCGAAGGGTGTCTACCTGATATTCATATTTAGATTTGACATTGGACGGGTGCCCGCCCGGTTTAAGCCCCACAACATTGGGCTCCCAGTTGCTGACTAGAGCGGATGATGAAAAATGACATTGACTAAGCCTGTGTGTGTATTAACGGTTGCTCCGATAGCGAACCGGAAAATTACAGTAGACTGTGCTGCCCATGCGGGTCGGTCATTACGGCACTCCATCACCAATGCTTGCGGTGGCAAGGCGTATAGATACAATGAGTCTGGTACGGCTAATGATCGGATCCCGTTCACGTAAGCCGAAGAGTACCATTTTCTAACGGTCACATCAAACCCGCGATCTTTAACGAAGCATGCAGTAAACGGTTGCCGAGTATAAGGACGCCCTCGGTGTCGGCCAAGCCTTCCGAGTGTGGGTGTGCACAATGCATAGGCCGAACGGCTGAAGAAGTGAACGTGTGGATTCCGATTCTGATCCGCAAGACACGCATAGCGCGCCGCCGGAGCGGCCTGTACCCAACCTTGCTCATTGAATAGTTTGAGGCGAACCTTTCAAATTAAATTAGTACCTGTAGCCCAACTATGACGGCTTCGACTGCACAACGACGGTACGCCCGTCACTCGCCTTACAAGTGAGCAGAAAAAGCGCCAACACCAAACTCAC'
    first = ''.join(sorted(last))
    l2f = [last_to_first(first, last, i) for i in range(len(last))]
    patterns_file = [line.strip() for line in open("patterns.txt").readlines()]
    patterns = patterns_file[0].split(" ")
    #print(patterns)
    counts = [BWMatching(first, last, patterns[i], l2f) for i in range(len(patterns))]
    for i in range(len(counts)):
        print(counts[i], end=' ')
